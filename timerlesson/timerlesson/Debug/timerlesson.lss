
timerlesson.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000228  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000949  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000699  00000000  00000000  00000cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000597  00000000  00000000  0000138a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00001924  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a1  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003a4  00000000  00000000  00001dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002179  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  64:	0c 94 12 01 	jmp	0x224	; 0x224 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <app_init>:
#include "application.h"
#define Number_over_flows 782

void app_init()
{
	LED_init(PORT_A,0);
  6c:	60 e0       	ldi	r22, 0x00	; 0
  6e:	81 e4       	ldi	r24, 0x41	; 65
  70:	0e 94 55 00 	call	0xaa	; 0xaa <LED_init>
	// set timer normal mode
	TCCR0 = 0x00;
  74:	13 be       	out	0x33, r1	; 51
	// timer initial value
	TCNT0 = 0x00;
  76:	12 be       	out	0x32, r1	; 50
  78:	08 95       	ret

0000007a <app_start>:
	
}
void app_start()
{
	
	LED_toggle(PORT_A,0);
  7a:	60 e0       	ldi	r22, 0x00	; 0
  7c:	81 e4       	ldi	r24, 0x41	; 65
  7e:	0e 94 59 00 	call	0xb2	; 0xb2 <LED_toggle>
	TCCR0 |= (1<<0);
  82:	83 b7       	in	r24, 0x33	; 51
  84:	81 60       	ori	r24, 0x01	; 1
  86:	83 bf       	out	0x33, r24	; 51
	int overflowcounter = 0;
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	30 e0       	ldi	r19, 0x00	; 0
	while(overflowcounter < Number_over_flows)
  8c:	08 c0       	rjmp	.+16     	; 0x9e <app_start+0x24>
	{	
	while((TIFR & (1<<0)) == 0 );
  8e:	08 b6       	in	r0, 0x38	; 56
  90:	00 fe       	sbrs	r0, 0
  92:	fd cf       	rjmp	.-6      	; 0x8e <app_start+0x14>
	TIFR |= (1<<0);
  94:	88 b7       	in	r24, 0x38	; 56
  96:	81 60       	ori	r24, 0x01	; 1
  98:	88 bf       	out	0x38, r24	; 56

	overflowcounter++;
  9a:	2f 5f       	subi	r18, 0xFF	; 255
  9c:	3f 4f       	sbci	r19, 0xFF	; 255
{
	
	LED_toggle(PORT_A,0);
	TCCR0 |= (1<<0);
	int overflowcounter = 0;
	while(overflowcounter < Number_over_flows)
  9e:	2e 30       	cpi	r18, 0x0E	; 14
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	38 07       	cpc	r19, r24
  a4:	a4 f3       	brlt	.-24     	; 0x8e <app_start+0x14>
	while((TIFR & (1<<0)) == 0 );
	TIFR |= (1<<0);

	overflowcounter++;
	}
	TCCR0 = 0x00;
  a6:	13 be       	out	0x33, r1	; 51
  a8:	08 95       	ret

000000aa <LED_init>:
{
	DIO_write(ledPort,ledPin,HIGH);
}
void LED_off(uint8_t ledPort,uint8_t ledPin)
{
	DIO_write(ledPort,ledPin,LOW);
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_init>
  b0:	08 95       	ret

000000b2 <LED_toggle>:
}
void LED_toggle(uint8_t ledPort,uint8_t ledPin)
{
	DIO_toggle( ledPort , ledPin);
  b2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_toggle>
  b6:	08 95       	ret

000000b8 <main>:



int main(void)
{
	app_init();
  b8:	0e 94 36 00 	call	0x6c	; 0x6c <app_init>
    /* Replace with your application code */
    while (1) 
    {	
		app_start();
  bc:	0e 94 3d 00 	call	0x7a	; 0x7a <app_start>
  c0:	fd cf       	rjmp	.-6      	; 0xbc <main+0x4>

000000c2 <DIO_init>:
		{
			PORTD &= ~(1<<pinNumber);
		}
		else if(value == HIGH)
		{
			PORTD |= (1<<pinNumber);
  c2:	82 34       	cpi	r24, 0x42	; 66
  c4:	31 f1       	breq	.+76     	; 0x112 <DIO_init+0x50>
  c6:	18 f4       	brcc	.+6      	; 0xce <DIO_init+0xc>
  c8:	81 34       	cpi	r24, 0x41	; 65
  ca:	39 f0       	breq	.+14     	; 0xda <DIO_init+0x18>
  cc:	08 95       	ret
  ce:	83 34       	cpi	r24, 0x43	; 67
  d0:	e1 f1       	breq	.+120    	; 0x14a <DIO_init+0x88>
  d2:	84 34       	cpi	r24, 0x44	; 68
  d4:	09 f4       	brne	.+2      	; 0xd8 <DIO_init+0x16>
  d6:	54 c0       	rjmp	.+168    	; 0x180 <DIO_init+0xbe>
  d8:	08 95       	ret
  da:	41 11       	cpse	r20, r1
  dc:	0c c0       	rjmp	.+24     	; 0xf6 <DIO_init+0x34>
  de:	2a b3       	in	r18, 0x1a	; 26
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_init+0x28>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_init+0x24>
  ee:	80 95       	com	r24
  f0:	82 23       	and	r24, r18
  f2:	8a bb       	out	0x1a, r24	; 26
  f4:	08 95       	ret
  f6:	41 30       	cpi	r20, 0x01	; 1
  f8:	09 f0       	breq	.+2      	; 0xfc <DIO_init+0x3a>
  fa:	5c c0       	rjmp	.+184    	; 0x1b4 <DIO_init+0xf2>
  fc:	2a b3       	in	r18, 0x1a	; 26
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_init+0x46>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_init+0x42>
 10c:	82 2b       	or	r24, r18
 10e:	8a bb       	out	0x1a, r24	; 26
 110:	08 95       	ret
 112:	41 11       	cpse	r20, r1
 114:	0c c0       	rjmp	.+24     	; 0x12e <DIO_init+0x6c>
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_init+0x60>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_init+0x5c>
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	87 bb       	out	0x17, r24	; 23
 12c:	08 95       	ret
 12e:	41 30       	cpi	r20, 0x01	; 1
 130:	09 f0       	breq	.+2      	; 0x134 <DIO_init+0x72>
 132:	40 c0       	rjmp	.+128    	; 0x1b4 <DIO_init+0xf2>
 134:	27 b3       	in	r18, 0x17	; 23
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_init+0x7e>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_init+0x7a>
 144:	82 2b       	or	r24, r18
 146:	87 bb       	out	0x17, r24	; 23
 148:	08 95       	ret
 14a:	41 11       	cpse	r20, r1
 14c:	0c c0       	rjmp	.+24     	; 0x166 <DIO_init+0xa4>
 14e:	24 b3       	in	r18, 0x14	; 20
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_init+0x98>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_init+0x94>
 15e:	80 95       	com	r24
 160:	82 23       	and	r24, r18
 162:	84 bb       	out	0x14, r24	; 20
 164:	08 95       	ret
 166:	41 30       	cpi	r20, 0x01	; 1
 168:	29 f5       	brne	.+74     	; 0x1b4 <DIO_init+0xf2>
 16a:	24 b3       	in	r18, 0x14	; 20
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_init+0xb4>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_init+0xb0>
 17a:	82 2b       	or	r24, r18
 17c:	84 bb       	out	0x14, r24	; 20
 17e:	08 95       	ret
 180:	41 11       	cpse	r20, r1
 182:	0c c0       	rjmp	.+24     	; 0x19c <DIO_init+0xda>
 184:	21 b3       	in	r18, 0x11	; 17
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_init+0xce>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_init+0xca>
 194:	80 95       	com	r24
 196:	82 23       	and	r24, r18
 198:	81 bb       	out	0x11, r24	; 17
 19a:	08 95       	ret
 19c:	41 30       	cpi	r20, 0x01	; 1
 19e:	51 f4       	brne	.+20     	; 0x1b4 <DIO_init+0xf2>
 1a0:	21 b3       	in	r18, 0x11	; 17
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_init+0xea>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_init+0xe6>
 1b0:	82 2b       	or	r24, r18
 1b2:	81 bb       	out	0x11, r24	; 17
 1b4:	08 95       	ret

000001b6 <DIO_toggle>:
	}
}

void DIO_toggle(uint8_t portNumber , uint8_t pinNumber)
{
		switch (portNumber)
 1b6:	82 34       	cpi	r24, 0x42	; 66
 1b8:	a1 f0       	breq	.+40     	; 0x1e2 <DIO_toggle+0x2c>
 1ba:	18 f4       	brcc	.+6      	; 0x1c2 <DIO_toggle+0xc>
 1bc:	81 34       	cpi	r24, 0x41	; 65
 1be:	31 f0       	breq	.+12     	; 0x1cc <DIO_toggle+0x16>
 1c0:	08 95       	ret
 1c2:	83 34       	cpi	r24, 0x43	; 67
 1c4:	c9 f0       	breq	.+50     	; 0x1f8 <DIO_toggle+0x42>
 1c6:	84 34       	cpi	r24, 0x44	; 68
 1c8:	11 f1       	breq	.+68     	; 0x20e <DIO_toggle+0x58>
 1ca:	08 95       	ret
	{
		case PORT_A:
			PORTA ^= (1<<pinNumber);
 1cc:	2b b3       	in	r18, 0x1b	; 27
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_toggle+0x22>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_toggle+0x1e>
 1dc:	82 27       	eor	r24, r18
 1de:	8b bb       	out	0x1b, r24	; 27
			break;
 1e0:	08 95       	ret
		case PORT_B:
			PORTB ^= (1<<pinNumber);
 1e2:	28 b3       	in	r18, 0x18	; 24
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_toggle+0x38>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_toggle+0x34>
 1f2:	82 27       	eor	r24, r18
 1f4:	88 bb       	out	0x18, r24	; 24
			break;
 1f6:	08 95       	ret
		case PORT_C:
			PORTC ^= (1<<pinNumber);
 1f8:	25 b3       	in	r18, 0x15	; 21
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_toggle+0x4e>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_toggle+0x4a>
 208:	82 27       	eor	r24, r18
 20a:	85 bb       	out	0x15, r24	; 21
			break;
 20c:	08 95       	ret
		case PORT_D:
			PORTD ^= (1<<pinNumber);
 20e:	22 b3       	in	r18, 0x12	; 18
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_toggle+0x64>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_toggle+0x60>
 21e:	82 27       	eor	r24, r18
 220:	82 bb       	out	0x12, r24	; 18
 222:	08 95       	ret

00000224 <_exit>:
 224:	f8 94       	cli

00000226 <__stop_program>:
 226:	ff cf       	rjmp	.-2      	; 0x226 <__stop_program>
